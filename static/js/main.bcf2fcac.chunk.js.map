{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["formatTime","dt","moment","utc","format","App","useState","date","setDate","timeStart","setTimeStart","timeEnd","setTimeEnd","reminder1","setReminder1","reminder2","setReminder2","game","setGame","games","among_us","labelText","role","channel","among_us_beginner","among_us_advanced","apex","splatoon2","smash_bros","boardgame","mario_kart","monster_hunter","mahjong","codenames","reminderText1","reminderText2","pollText","dtStart","Date","dtEnd","calenderUrl","encodeURI","className","Header","aria-label","HeaderName","href","prefix","Content","Tile","DatePicker","datePickerType","dateFormat","locale","value","onChange","newDate","DatePickerInput","placeholder","id","Select","defaultValue","event","target","Object","entries","map","key","SelectItem","text","Accordion","AccordionItem","title","TextInput","type","TextArea","rows","CopyButton","onClick","copy","Button","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bcf2fcac.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport moment from \"moment\";\nimport copy from 'copy-to-clipboard';\nimport './App.css';\nimport {\n  Header,\n  Content,\n  HeaderName,\n  Tile,\n  DatePicker,\n  DatePickerInput,\n  TextInput,\n  TextArea,\n  Select,\n  SelectItem,\n  CopyButton,\n  Accordion,\n  AccordionItem,\n  Button,\n} from 'carbon-components-react';\n\nfunction formatDate(dt: Date): string {\n  return moment(dt).format(\"YYYY/MM/DD\")\n}\nfunction formatTime(dt: Date): string {\n  return `${moment.utc(dt).format(\"YYYYMMDDTHHmmss\")}Z`\n}\n\ntype Game = {\n  labelText: string,\n  role: string,\n  channel: string,\n}\nfunction App() {\n  const [date, setDate] = useState(moment().format(\"YYYY/MM/DD\"));\n  const [timeStart, setTimeStart] = useState(\"20:00\");\n  const [timeEnd, setTimeEnd] = useState(\"22:00\");\n  const [reminder1, setReminder1] = useState(\"12:30\");\n  const [reminder2, setReminder2] = useState(\"19:30\");\n  const [game, setGame] = useState(\"among_us\");\n  const games: { [key: string]: Game } = {\n    among_us: {\n      labelText: \"Among Us\",\n      role: \"AmongUs\",\n      channel: \"among-us\",\n    },\n    among_us_beginner: {\n      labelText: \"Among Us (かけだしクルーメイト)\",\n      role: \"AmongUs(かけだしクルーメイト)\",\n      channel: \"among-us\",\n    },\n    among_us_advanced: {\n      labelText: \"Among Us (いちにんまえクルーメイト)\",\n      role: \"AmongUs(いちにんまえクルーメイト)\",\n      channel: \"among-us\",\n    },\n    apex: {\n      labelText: \"Apex Legends\",\n      role: \"ApexLegends\",\n      channel: \"apex\",\n    },\n    splatoon2: {\n      labelText: \"Splatoon2\",\n      role: \"Splatoon2\",\n      channel: \"splatoon2\",\n    },\n    smash_bros: {\n      labelText: \"スマッシュブラザーズSPECIAL\",\n      role: \"スマッシュブラザーズSPECIAL\",\n      channel: \"スマッシュブラザーズ\",\n    },\n    boardgame: {\n      labelText: \"ボードゲーム\",\n      role: \"ボードゲーム\",\n      channel: \"ボードゲーム\",\n    },\n    mario_kart: {\n      labelText: \"マリオカート8 デラックス\",\n      role: \"マリオカート8デラックス\",\n      channel: \"マリオカート\",\n    },\n    monster_hunter: {\n      labelText: \"モンスターハンターライズ\",\n      role: \"モンスターハンターライズ\",\n      channel: \"モンスターハンターライズ\",\n    },\n    mahjong: {\n      labelText: \"麻雀\",\n      role: \"麻雀\",\n      channel: \"麻雀\",\n    },\n    codenames: {\n      labelText: \"コードネーム\",\n      role: \"コードネーム\",\n      channel: \"コードネーム\",\n    },\n  }\n\n  const reminderText1 = `$natural\n${date} ${reminder1}\n send\n@${games[game].role}\n本日 ${date} ${timeStart} ${games[game].labelText} をやります。よろしくお願いします\n to #${games[game].channel}`\n  const reminderText2 = `$natural\n${date} ${reminder2}\n send\n@${games[game].role}\nまもなく ${games[game].labelText} が始まります！時間になったら Gaming1 チャンネルで待機してください\n to #${games[game].channel}`\n\n  const pollText = `?poll\n@${games[game].role}\n\"${date} ${timeStart} からの ${games[game].labelText} に参加しますか？\"\n:o: 参加します\n:x: 参加しません\n:question: まだ調整中です`\n\n  const dtStart = new Date(`${date} ${timeStart}`)\n  const dtEnd = new Date(`${date} ${timeEnd}`)\n  const calenderUrl = encodeURI(`https://calendar.google.com/calendar/render?action=TEMPLATE&dates=${formatTime(dtStart)}/${formatTime(dtEnd)}&text=${games[game].labelText}&details=${games[game].labelText} をやります`)\n\n  return (\n    <div className=\"App\">\n      <Header aria-label=\"ゲーム部日程調整ツール\">\n        <HeaderName href=\"#\" prefix=\"\">\n          ゲーム部日程調整ツール\n        </HeaderName>\n      </Header>\n      <Content>\n\n        <Tile className=\"tile-input\">\n          <h1>日程選択</h1>\n          <DatePicker\n            datePickerType=\"single\"\n            dateFormat=\"Y/m/d\"\n            locale=\"ja\"\n            value={date}\n            onChange={newDate => setDate(formatDate(newDate[0]))}\n          >\n            <DatePickerInput\n              placeholder=\"yyyy/mm/dd\"\n              labelText=\"日付を選択\"\n              id=\"date-picker-single\"\n            />\n          </DatePicker>\n          <Select\n            id=\"select-game\"\n            defaultValue={game}\n            labelText=\"ゲームを選択\"\n            onChange={event => setGame(event.target.value)}\n          >\n            {\n              Object.entries(games).map(([key, game]) => <SelectItem key={key} value={key} text={games[key].labelText} />)\n            }\n          </Select>\n          <Accordion>\n            <AccordionItem title=\"詳細設定\">\n              <TextInput\n                labelText=\"開始時刻\"\n                id=\"text-input-time-start\"\n                value={timeStart}\n                type=\"time\"\n                onChange={event => setTimeStart(event.target.value)} />\n              <TextInput\n                labelText=\"終了時刻\"\n                id=\"text-input-time-end\"\n                value={timeEnd}\n                type=\"time\"\n                onChange={event => setTimeEnd(event.target.value)} />\n              <TextInput\n                labelText=\"リマインダ 昼\"\n                id=\"text-input-reminder2\"\n                value={reminder1}\n                type=\"time\"\n                onChange={event => setReminder1(event.target.value)} />\n              <TextInput\n                labelText=\"リマインダ 夜\"\n                id=\"text-input-reminder2\"\n                value={reminder2}\n                type=\"time\"\n                onChange={event => setReminder2(event.target.value)} />\n            </AccordionItem>\n          </Accordion>\n\n        </Tile>\n\n        <Tile>\n          <div>\n            <TextArea\n              labelText=\"リマインダ 昼\"\n              rows={6}\n              value={reminderText1} />\n            <CopyButton onClick={() => copy(reminderText1)}/>\n          </div>\n          <div>\n            <TextArea\n              labelText=\"リマインダ 夜\"\n              rows={6}\n              value={reminderText2} />\n            <CopyButton onClick={() => copy(reminderText2)}/>\n          </div>\n          <div>\n            <TextArea\n              labelText=\"参加確認\"\n              rows={6}\n              value={pollText} />\n            <CopyButton onClick={() => copy(pollText)}/>\n          </div>\n          <div>\n            <Button href={calenderUrl} target=\"_blank\">Googleカレンダーに追加</Button>\n          </div>\n        </Tile>\n      </Content>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}